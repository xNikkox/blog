{
  "version": 3,
  "sources": ["../../@astrojs/preact/static-html.js", "../../@astrojs/preact/client.js", "dep:@astrojs_preact_client_js"],
  "sourcesContent": ["import { h } from 'preact';\n\n/**\n * Astro passes `children` as a string of HTML, so we need\n * a wrapper `div` to render that content as VNodes.\n *\n * As a bonus, we can signal to Preact that this subtree is\n * entirely static and will never change via `shouldComponentUpdate`.\n */\nconst StaticHtml = ({ value, name }) => {\n\tif (!value) return null;\n\treturn h('astro-slot', { name, dangerouslySetInnerHTML: { __html: value } });\n};\n\n/**\n * This tells Preact to opt-out of re-rendering this subtree,\n * In addition to being a performance optimization,\n * this also allows other frameworks to attach to `children`.\n *\n * See https://preactjs.com/guide/v8/external-dom-mutations\n */\nStaticHtml.shouldComponentUpdate = () => false;\n\nexport default StaticHtml;\n", "import { h, render } from 'preact';\nimport StaticHtml from './static-html.js';\n\nexport default (element) =>\n\t(Component, props, { default: children, ...slotted }) => {\n\t\tif (!element.hasAttribute('ssr')) return;\n\t\tfor (const [key, value] of Object.entries(slotted)) {\n\t\t\tprops[key] = h(StaticHtml, { value, name: key });\n\t\t}\n\t\trender(\n\t\t\th(Component, props, children != null ? h(StaticHtml, { value: children }) : children),\n\t\t\telement\n\t\t);\n\t};\n", "import d from \"./node_modules/@astrojs/preact/client.js\";export default d;"],
  "mappings": ";;;;;;;AASA,IAAM,aAAa,CAAC,EAAE,OAAO,WAAW;AACvC,MAAI,CAAC;AAAO,WAAO;AACnB,SAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,EAAE,QAAQ,MAAM,EAAE,CAAC;AAC5E;AASA,WAAW,wBAAwB,MAAM;AAEzC,IAAO,sBAAQ;;;ACpBf,IAAO,iBAAQ,CAAC,YACf,CAAC,WAAW,OAAO,EAAE,SAAS,aAAa,cAAc;AACxD,MAAI,CAAC,QAAQ,aAAa,KAAK;AAAG;AAClC,aAAW,CAAC,KAAK,UAAU,OAAO,QAAQ,OAAO,GAAG;AACnD,UAAM,OAAO,EAAE,qBAAY,EAAE,OAAO,MAAM,IAAI,CAAC;AAAA,EAChD;AACA,IACC,EAAE,WAAW,OAAO,YAAY,OAAO,EAAE,qBAAY,EAAE,OAAO,SAAS,CAAC,IAAI,QAAQ,GACpF,OACD;AACD;;;ACbwD,IAAO,mCAAQ;",
  "names": []
}

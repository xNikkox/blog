{
  "version": 3,
  "sources": ["../../preact-render-to-string/src/util.js", "../../preact-render-to-string/src/index.js", "dep:preact-render-to-string"],
  "sourcesContent": ["// DOM properties that should NOT have \"px\" added when numeric\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|^--/i;\n\nconst ENCODED_ENTITIES = /[&<>\"]/;\n\nexport function encodeEntities(input) {\n\tconst s = String(input);\n\tif (!ENCODED_ENTITIES.test(s)) {\n\t\treturn s;\n\t}\n\treturn s\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n}\n\nexport let indent = (s, char) =>\n\tString(s).replace(/(\\n+)/g, '$1' + (char || '\\t'));\n\nexport let isLargeString = (s, length, ignoreLines) =>\n\tString(s).length > (length || 40) ||\n\t(!ignoreLines && String(s).indexOf('\\n') !== -1) ||\n\tString(s).indexOf('<') !== -1;\n\nconst JS_TO_CSS = {};\n\n// Convert an Object style to a CSSText string\nexport function styleObjToCss(s) {\n\tlet str = '';\n\tfor (let prop in s) {\n\t\tlet val = s[prop];\n\t\tif (val != null && val !== '') {\n\t\t\tif (str) str += ' ';\n\t\t\t// str += jsToCss(prop);\n\t\t\tstr +=\n\t\t\t\tprop[0] == '-'\n\t\t\t\t\t? prop\n\t\t\t\t\t: JS_TO_CSS[prop] ||\n\t\t\t\t\t  (JS_TO_CSS[prop] = prop.replace(/([A-Z])/g, '-$1').toLowerCase());\n\t\t\tstr += ': ';\n\t\t\tstr += val;\n\t\t\tif (typeof val === 'number' && IS_NON_DIMENSIONAL.test(prop) === false) {\n\t\t\t\tstr += 'px';\n\t\t\t}\n\t\t\tstr += ';';\n\t\t}\n\t}\n\treturn str || undefined;\n}\n\n/**\n * Copy all properties from `props` onto `obj`.\n * @param {object} obj Object onto which properties should be copied.\n * @param {object} props Object from which to copy properties.\n * @returns {object}\n * @private\n */\nexport function assign(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn obj;\n}\n\n/**\n * Get flattened children from the children prop\n * @param {Array} accumulator\n * @param {any} children A `props.children` opaque object.\n * @returns {Array} accumulator\n * @private\n */\nexport function getChildren(accumulator, children) {\n\tif (Array.isArray(children)) {\n\t\tchildren.reduce(getChildren, accumulator);\n\t} else if (children != null && children !== false) {\n\t\taccumulator.push(children);\n\t}\n\treturn accumulator;\n}\n", "import {\n\tencodeEntities,\n\tindent,\n\tisLargeString,\n\tstyleObjToCss,\n\tassign,\n\tgetChildren\n} from './util';\nimport { options, Fragment } from 'preact';\n\n/** @typedef {import('preact').VNode} VNode */\n\nconst SHALLOW = { shallow: true };\n\n// components without names, kept as a hash for later comparison to return consistent UnnamedComponentXX names.\nconst UNNAMED = [];\n\nconst VOID_ELEMENTS =\n\t/^(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)$/;\n\nconst UNSAFE_NAME = /[\\s\\n\\\\/='\"\\0<>]/;\n\nfunction markAsDirty() {\n\tthis.__d = true;\n}\n\n/** Render Preact JSX + Components to an HTML string.\n *\t@name render\n *\t@function\n *\t@param {VNode} vnode\tJSX VNode to render.\n *\t@param {Object} [context={}]\tOptionally pass an initial context object through the render path.\n *\t@param {Object} [options={}]\tRendering options\n *\t@param {Boolean} [options.shallow=false]\tIf `true`, renders nested Components as HTML elements (`<Foo a=\"b\" />`).\n *\t@param {Boolean} [options.xml=false]\t\tIf `true`, uses self-closing tags for elements without children.\n *\t@param {Boolean} [options.pretty=false]\t\tIf `true`, adds whitespace for readability\n *\t@param {RegExp|undefined} [options.voidElements]       RegeEx that matches elements that are considered void (self-closing)\n */\nrenderToString.render = renderToString;\n\n/** Only render elements, leaving Components inline as `<ComponentName ... />`.\n *\tThis method is just a convenience alias for `render(vnode, context, { shallow:true })`\n *\t@name shallow\n *\t@function\n *\t@param {VNode} vnode\tJSX VNode to render.\n *\t@param {Object} [context={}]\tOptionally pass an initial context object through the render path.\n */\nlet shallowRender = (vnode, context) => renderToString(vnode, context, SHALLOW);\n\nconst EMPTY_ARR = [];\nfunction renderToString(vnode, context, opts) {\n\tcontext = context || {};\n\topts = opts || {};\n\n\t// Performance optimization: `renderToString` is synchronous and we\n\t// therefore don't execute any effects. To do that we pass an empty\n\t// array to `options._commit` (`__c`). But we can go one step further\n\t// and avoid a lot of dirty checks and allocations by setting\n\t// `options._skipEffects` (`__s`) too.\n\tconst previousSkipEffects = options.__s;\n\toptions.__s = true;\n\n\tconst res = _renderToString(vnode, context, opts);\n\n\t// options._commit, we don't schedule any effects in this library right now,\n\t// so we can pass an empty queue to this hook.\n\tif (options.__c) options.__c(vnode, EMPTY_ARR);\n\tEMPTY_ARR.length = 0;\n\toptions.__s = previousSkipEffects;\n\treturn res;\n}\n\n/** The default export is an alias of `render()`. */\nfunction _renderToString(vnode, context, opts, inner, isSvgMode, selectValue) {\n\tif (vnode == null || typeof vnode === 'boolean') {\n\t\treturn '';\n\t}\n\n\t// #text nodes\n\tif (typeof vnode !== 'object') {\n\t\treturn encodeEntities(vnode);\n\t}\n\n\tlet pretty = opts.pretty,\n\t\tindentChar = pretty && typeof pretty === 'string' ? pretty : '\\t';\n\n\tif (Array.isArray(vnode)) {\n\t\tlet rendered = '';\n\t\tfor (let i = 0; i < vnode.length; i++) {\n\t\t\tif (pretty && i > 0) rendered = rendered + '\\n';\n\t\t\trendered =\n\t\t\t\trendered +\n\t\t\t\t_renderToString(vnode[i], context, opts, inner, isSvgMode, selectValue);\n\t\t}\n\t\treturn rendered;\n\t}\n\n\tlet nodeName = vnode.type,\n\t\tprops = vnode.props,\n\t\tisComponent = false;\n\n\t// components\n\tif (typeof nodeName === 'function') {\n\t\tisComponent = true;\n\t\tif (opts.shallow && (inner || opts.renderRootComponent === false)) {\n\t\t\tnodeName = getComponentName(nodeName);\n\t\t} else if (nodeName === Fragment) {\n\t\t\tconst children = [];\n\t\t\tgetChildren(children, vnode.props.children);\n\t\t\treturn _renderToString(\n\t\t\t\tchildren,\n\t\t\t\tcontext,\n\t\t\t\topts,\n\t\t\t\topts.shallowHighOrder !== false,\n\t\t\t\tisSvgMode,\n\t\t\t\tselectValue\n\t\t\t);\n\t\t} else {\n\t\t\tlet rendered;\n\n\t\t\tlet c = (vnode.__c = {\n\t\t\t\t__v: vnode,\n\t\t\t\tcontext,\n\t\t\t\tprops: vnode.props,\n\t\t\t\t// silently drop state updates\n\t\t\t\tsetState: markAsDirty,\n\t\t\t\tforceUpdate: markAsDirty,\n\t\t\t\t__d: true,\n\t\t\t\t// hooks\n\t\t\t\t__h: []\n\t\t\t});\n\n\t\t\t// options._diff\n\t\t\tif (options.__b) options.__b(vnode);\n\n\t\t\t// options._render\n\t\t\tlet renderHook = options.__r;\n\n\t\t\tif (\n\t\t\t\t!nodeName.prototype ||\n\t\t\t\ttypeof nodeName.prototype.render !== 'function'\n\t\t\t) {\n\t\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t\t// the context value as `this.context` just for this component.\n\t\t\t\tlet cxType = nodeName.contextType;\n\t\t\t\tlet provider = cxType && context[cxType.__c];\n\t\t\t\tlet cctx =\n\t\t\t\t\tcxType != null\n\t\t\t\t\t\t? provider\n\t\t\t\t\t\t\t? provider.props.value\n\t\t\t\t\t\t\t: cxType.__\n\t\t\t\t\t\t: context;\n\n\t\t\t\t// If a hook invokes setState() to invalidate the component during rendering,\n\t\t\t\t// re-render it up to 25 times to allow \"settling\" of memoized states.\n\t\t\t\t// Note:\n\t\t\t\t//   This will need to be updated for Preact 11 to use internal.flags rather than component._dirty:\n\t\t\t\t//   https://github.com/preactjs/preact/blob/d4ca6fdb19bc715e49fd144e69f7296b2f4daa40/src/diff/component.js#L35-L44\n\t\t\t\tlet count = 0;\n\t\t\t\twhile (c.__d && count++ < 25) {\n\t\t\t\t\tc.__d = false;\n\n\t\t\t\t\tif (renderHook) renderHook(vnode);\n\n\t\t\t\t\t// stateless functional components\n\t\t\t\t\trendered = nodeName.call(vnode.__c, props, cctx);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// class-based components\n\t\t\t\tlet cxType = nodeName.contextType;\n\t\t\t\tlet provider = cxType && context[cxType.__c];\n\t\t\t\tlet cctx =\n\t\t\t\t\tcxType != null\n\t\t\t\t\t\t? provider\n\t\t\t\t\t\t\t? provider.props.value\n\t\t\t\t\t\t\t: cxType.__\n\t\t\t\t\t\t: context;\n\n\t\t\t\t// c = new nodeName(props, context);\n\t\t\t\tc = vnode.__c = new nodeName(props, cctx);\n\t\t\t\tc.__v = vnode;\n\t\t\t\t// turn off stateful re-rendering:\n\t\t\t\tc._dirty = c.__d = true;\n\t\t\t\tc.props = props;\n\t\t\t\tif (c.state == null) c.state = {};\n\n\t\t\t\tif (c._nextState == null && c.__s == null) {\n\t\t\t\t\tc._nextState = c.__s = c.state;\n\t\t\t\t}\n\n\t\t\t\tc.context = cctx;\n\t\t\t\tif (nodeName.getDerivedStateFromProps)\n\t\t\t\t\tc.state = assign(\n\t\t\t\t\t\tassign({}, c.state),\n\t\t\t\t\t\tnodeName.getDerivedStateFromProps(c.props, c.state)\n\t\t\t\t\t);\n\t\t\t\telse if (c.componentWillMount) {\n\t\t\t\t\tc.componentWillMount();\n\n\t\t\t\t\t// If the user called setState in cWM we need to flush pending,\n\t\t\t\t\t// state updates. This is the same behaviour in React.\n\t\t\t\t\tc.state =\n\t\t\t\t\t\tc._nextState !== c.state\n\t\t\t\t\t\t\t? c._nextState\n\t\t\t\t\t\t\t: c.__s !== c.state\n\t\t\t\t\t\t\t? c.__s\n\t\t\t\t\t\t\t: c.state;\n\t\t\t\t}\n\n\t\t\t\tif (renderHook) renderHook(vnode);\n\n\t\t\t\trendered = c.render(c.props, c.state, c.context);\n\t\t\t}\n\n\t\t\tif (c.getChildContext) {\n\t\t\t\tcontext = assign(assign({}, context), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (options.diffed) options.diffed(vnode);\n\t\t\treturn _renderToString(\n\t\t\t\trendered,\n\t\t\t\tcontext,\n\t\t\t\topts,\n\t\t\t\topts.shallowHighOrder !== false,\n\t\t\t\tisSvgMode,\n\t\t\t\tselectValue\n\t\t\t);\n\t\t}\n\t}\n\n\t// render JSX to HTML\n\tlet s = '<' + nodeName,\n\t\tpropChildren,\n\t\thtml;\n\n\tif (props) {\n\t\tlet attrs = Object.keys(props);\n\n\t\t// allow sorting lexicographically for more determinism (useful for tests, such as via preact-jsx-chai)\n\t\tif (opts && opts.sortAttributes === true) attrs.sort();\n\n\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\tlet name = attrs[i],\n\t\t\t\tv = props[name];\n\t\t\tif (name === 'children') {\n\t\t\t\tpropChildren = v;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (UNSAFE_NAME.test(name)) continue;\n\n\t\t\tif (\n\t\t\t\t!(opts && opts.allAttributes) &&\n\t\t\t\t(name === 'key' ||\n\t\t\t\t\tname === 'ref' ||\n\t\t\t\t\tname === '__self' ||\n\t\t\t\t\tname === '__source')\n\t\t\t)\n\t\t\t\tcontinue;\n\n\t\t\tif (name === 'defaultValue') {\n\t\t\t\tname = 'value';\n\t\t\t} else if (name === 'defaultChecked') {\n\t\t\t\tname = 'checked';\n\t\t\t} else if (name === 'defaultSelected') {\n\t\t\t\tname = 'selected';\n\t\t\t} else if (name === 'className') {\n\t\t\t\tif (typeof props.class !== 'undefined') continue;\n\t\t\t\tname = 'class';\n\t\t\t} else if (isSvgMode && /^xlink:?./.test(name)) {\n\t\t\t\tname = name.toLowerCase().replace(/^xlink:?/, 'xlink:');\n\t\t\t}\n\n\t\t\tif (name === 'htmlFor') {\n\t\t\t\tif (props.for) continue;\n\t\t\t\tname = 'for';\n\t\t\t}\n\n\t\t\tif (name === 'style' && v && typeof v === 'object') {\n\t\t\t\tv = styleObjToCss(v);\n\t\t\t}\n\n\t\t\t// always use string values instead of booleans for aria attributes\n\t\t\t// also see https://github.com/preactjs/preact/pull/2347/files\n\t\t\tif (name[0] === 'a' && name['1'] === 'r' && typeof v === 'boolean') {\n\t\t\t\tv = String(v);\n\t\t\t}\n\n\t\t\tlet hooked =\n\t\t\t\topts.attributeHook &&\n\t\t\t\topts.attributeHook(name, v, context, opts, isComponent);\n\t\t\tif (hooked || hooked === '') {\n\t\t\t\ts = s + hooked;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (name === 'dangerouslySetInnerHTML') {\n\t\t\t\thtml = v && v.__html;\n\t\t\t} else if (nodeName === 'textarea' && name === 'value') {\n\t\t\t\t// <textarea value=\"a&b\"> --> <textarea>a&amp;b</textarea>\n\t\t\t\tpropChildren = v;\n\t\t\t} else if ((v || v === 0 || v === '') && typeof v !== 'function') {\n\t\t\t\tif (v === true || v === '') {\n\t\t\t\t\tv = name;\n\t\t\t\t\t// in non-xml mode, allow boolean attributes\n\t\t\t\t\tif (!opts || !opts.xml) {\n\t\t\t\t\t\ts = s + ' ' + name;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (name === 'value') {\n\t\t\t\t\tif (nodeName === 'select') {\n\t\t\t\t\t\tselectValue = v;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else if (\n\t\t\t\t\t\t// If we're looking at an <option> and it's the currently selected one\n\t\t\t\t\t\tnodeName === 'option' &&\n\t\t\t\t\t\tselectValue == v &&\n\t\t\t\t\t\t// and the <option> doesn't already have a selected attribute on it\n\t\t\t\t\t\ttypeof props.selected === 'undefined'\n\t\t\t\t\t) {\n\t\t\t\t\t\ts = s + ` selected`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ts = s + ` ${name}=\"${encodeEntities(v)}\"`;\n\t\t\t}\n\t\t}\n\t}\n\n\t// account for >1 multiline attribute\n\tif (pretty) {\n\t\tlet sub = s.replace(/\\n\\s*/, ' ');\n\t\tif (sub !== s && !~sub.indexOf('\\n')) s = sub;\n\t\telse if (pretty && ~s.indexOf('\\n')) s = s + '\\n';\n\t}\n\n\ts = s + '>';\n\n\tif (UNSAFE_NAME.test(nodeName))\n\t\tthrow new Error(`${nodeName} is not a valid HTML tag name in ${s}`);\n\n\tlet isVoid =\n\t\tVOID_ELEMENTS.test(nodeName) ||\n\t\t(opts.voidElements && opts.voidElements.test(nodeName));\n\tlet pieces = [];\n\n\tlet children;\n\tif (html) {\n\t\t// if multiline, indent.\n\t\tif (pretty && isLargeString(html)) {\n\t\t\thtml = '\\n' + indentChar + indent(html, indentChar);\n\t\t}\n\t\ts = s + html;\n\t} else if (\n\t\tpropChildren != null &&\n\t\tgetChildren((children = []), propChildren).length\n\t) {\n\t\tlet hasLarge = pretty && ~s.indexOf('\\n');\n\t\tlet lastWasText = false;\n\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\tlet child = children[i];\n\n\t\t\tif (child != null && child !== false) {\n\t\t\t\tlet childSvgMode =\n\t\t\t\t\t\tnodeName === 'svg'\n\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t: nodeName === 'foreignObject'\n\t\t\t\t\t\t\t? false\n\t\t\t\t\t\t\t: isSvgMode,\n\t\t\t\t\tret = _renderToString(\n\t\t\t\t\t\tchild,\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\topts,\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tchildSvgMode,\n\t\t\t\t\t\tselectValue\n\t\t\t\t\t);\n\n\t\t\t\tif (pretty && !hasLarge && isLargeString(ret)) hasLarge = true;\n\n\t\t\t\t// Skip if we received an empty string\n\t\t\t\tif (ret) {\n\t\t\t\t\tif (pretty) {\n\t\t\t\t\t\tlet isText = ret.length > 0 && ret[0] != '<';\n\n\t\t\t\t\t\t// We merge adjacent text nodes, otherwise each piece would be printed\n\t\t\t\t\t\t// on a new line.\n\t\t\t\t\t\tif (lastWasText && isText) {\n\t\t\t\t\t\t\tpieces[pieces.length - 1] += ret;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpieces.push(ret);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlastWasText = isText;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpieces.push(ret);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (pretty && hasLarge) {\n\t\t\tfor (let i = pieces.length; i--; ) {\n\t\t\t\tpieces[i] = '\\n' + indentChar + indent(pieces[i], indentChar);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (pieces.length || html) {\n\t\ts = s + pieces.join('');\n\t} else if (opts && opts.xml) {\n\t\treturn s.substring(0, s.length - 1) + ' />';\n\t}\n\n\tif (isVoid && !children && !html) {\n\t\ts = s.replace(/>$/, ' />');\n\t} else {\n\t\tif (pretty && ~s.indexOf('\\n')) s = s + '\\n';\n\t\ts = s + `</${nodeName}>`;\n\t}\n\n\treturn s;\n}\n\nfunction getComponentName(component) {\n\treturn (\n\t\tcomponent.displayName ||\n\t\t(component !== Function && component.name) ||\n\t\tgetFallbackComponentName(component)\n\t);\n}\n\nfunction getFallbackComponentName(component) {\n\tlet str = Function.prototype.toString.call(component),\n\t\tname = (str.match(/^\\s*function\\s+([^( ]+)/) || '')[1];\n\tif (!name) {\n\t\t// search for an existing indexed name for the given component:\n\t\tlet index = -1;\n\t\tfor (let i = UNNAMED.length; i--; ) {\n\t\t\tif (UNNAMED[i] === component) {\n\t\t\t\tindex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// not found, create a new indexed name:\n\t\tif (index < 0) {\n\t\t\tindex = UNNAMED.push(component) - 1;\n\t\t}\n\t\tname = `UnnamedComponent${index}`;\n\t}\n\treturn name;\n}\nrenderToString.shallowRender = shallowRender;\n\nexport default renderToString;\n\nexport {\n\trenderToString as render,\n\trenderToString as renderToStaticMarkup,\n\trenderToString,\n\tshallowRender\n};\n", "import d from \"./node_modules/preact-render-to-string/dist/index.module.js\";export default d;\nexport * from \"./node_modules/preact-render-to-string/dist/index.module.js\""],
  "mappings": "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",
  "names": []
}
